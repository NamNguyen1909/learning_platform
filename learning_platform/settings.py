"""
Django settings for learning_platform project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Initialise environment variables
env = environ.Env()
environ.Env.read_env(env_file=BASE_DIR / ".env")

# Cloudinary settings
CLOUDINARY = {
    'cloud_name': env('CLOUDINARY_CLOUD_NAME', default=''),
    'api_key': env('CLOUDINARY_API_KEY', default=''),
    'api_secret': env('CLOUDINARY_API_SECRET', default=''),
}

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY")

AUTH_USER_MODEL = 'learningapi.User'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env("DEBUG", default="False") == "True"

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'learningapi.apps.LearningapiConfig',
    'drf_yasg',
    'oauth2_provider',
    'social_django',
    'rest_framework',
]
# REST Framework & OAuth2/JWT config
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'oauth2_provider.contrib.rest_framework.OAuth2Authentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    # 'DEFAULT_PERMISSION_CLASSES': [
    #     # 'rest_framework.permissions.IsAuthenticated', #Mở lại khi cần
    # ],
}

# SimpleJWT config (có thể tùy chỉnh thêm)
from datetime import timedelta
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'AUTH_HEADER_TYPES': ('Bearer',),
}

# Social Auth config (Google, GitHub...)

AUTHENTICATION_BACKENDS = (
    'social_core.backends.google.GoogleOAuth2',
    'social_core.backends.github.GithubOAuth2',
    'social_core.backends.facebook.FacebookOAuth2',
    'django.contrib.auth.backends.ModelBackend',
)
# vào http://localhost:8000/auth/login/google-oauth2/ để test
# https://myaccount.google.com/permissions
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = env('SOCIAL_AUTH_GOOGLE_OAUTH2_KEY', default='')
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = env('SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET', default='')
# vào http://localhost:8000/auth/login/github/ để test
# https://github.com/settings/applications
SOCIAL_AUTH_GITHUB_KEY = env('SOCIAL_AUTH_GITHUB_KEY', default='')
SOCIAL_AUTH_GITHUB_SECRET = env('SOCIAL_AUTH_GITHUB_SECRET', default='')
SOCIAL_AUTH_GITHUB_SCOPE = ['user:email']
SOCIAL_AUTH_GITHUB_PROFILE_EXTRA_PARAMS = {'scope': 'user:email'}
# cần hồ sơ doanh nghiệp để tạo app => chưa thành công 
SOCIAL_AUTH_FACEBOOK_KEY = env('SOCIAL_AUTH_FACEBOOK_KEY', default='')
SOCIAL_AUTH_FACEBOOK_SECRET = env('SOCIAL_AUTH_FACEBOOK_SECRET', default='')

LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = 'http://localhost:5173/' # Redirect về frontend 
## CORS settings
CORS_ALLOW_ALL_ORIGINS = True  # Cho phép tất cả các domain, có thể thay bằng CORS_ALLOWED_ORIGINS = ['http://localhost:5173'] nếu chỉ cho phép frontend








## Static & Media files
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'mediafiles'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    "corsheaders.middleware.CorsMiddleware",
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'learning_platform.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'learning_platform.wsgi.application'



# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
import dj_database_url

db_url = env("DATABASE_URL", default=None)
if db_url:
    if db_url.startswith("postgres://") or db_url.startswith("postgresql://"):
        db_engine = "django.db.backends.postgresql"
    elif db_url.startswith("mysql://"):
        db_engine = "django.db.backends.mysql"
    else:
        raise ValueError("Unsupported database engine in DATABASE_URL")

    DATABASES = {
        'default': dj_database_url.config(
            default=db_url,
            conn_max_age=600,
            engine=db_engine
        )
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': env("DB_NAME", default="mydatabase"),
            'USER': env("DB_USER", default="myuser"),
            'PASSWORD': env("DB_PASSWORD", default="mypassword"),
            'HOST': env("DB_HOST", default="localhost"),
            'PORT': env("DB_PORT", default="3306"),
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = env("TIME_ZONE", default="UTC")

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Bắt buộc email khi tạo user (cho mọi provider) 
# Nếu provider không trả về email, social-auth sẽ yêu cầu user nhập email sau khi đăng nhập lần đầu.
SOCIAL_AUTH_PIPELINE = (
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.auth_allowed',
    'social_core.pipeline.social_auth.social_user',
    'social_core.pipeline.user.get_username',
    'social_core.pipeline.mail.mail_validation',
    'social_core.pipeline.user.create_user',
    'social_core.pipeline.social_auth.associate_user',
    'social_core.pipeline.social_auth.load_extra_data',
    'social_core.pipeline.user.user_details',
    'learningapi.pipeline.generate_jwt_and_redirect',
)
SOCIAL_AUTH_FIELDS_STORED_IN_SESSION = ['email']
SOCIAL_AUTH_EMAIL_REQUIRED = True
SOCIAL_AUTH_EMAIL_VALIDATION_FUNCTION = 'django.core.mail.send_mail'
SOCIAL_AUTH_EMAIL_VALIDATION_URL = '/email-validation-sent/'

# Truy cập đường dẫn đăng nhập
# Google: http://localhost:8000/auth/login/google-oauth2/
# GitHub: http://localhost:8000/auth/login/github/
# Facebook: http://localhost:8000/auth/login/facebook/
# Redirect URI là
# http://localhost:8000/auth/complete/google-oauth2/
# http://localhost:8000/auth/complete/github/
# http://localhost:8000/auth/complete/facebook/